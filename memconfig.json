{
  "dependencies": {
    "http": "http:",
    "endpoint": "sys-process:endpointUrl"
  },
  "expressions": {
    "user": {
      "description": "User",
      "type": "url",
      "searchIn": "https://github.com",
      "regex": "https://github.com/((?!pulls$|issues$|marketplace$|explore$|notifications$|codespaces$)[^/])+$"
    },
    "repo": {
      "description": "Repo",
      "type": "url",
      "searchIn": "https://github.com",
      "regex": "https://github.com/[^/]+/[^/]+$"
    },
    "issue": {
      "description": "Issue",
      "type": "url",
      "searchIn": "https://github.com",
      "regex": "https://github.com/[^/]+/[^/]+/issues/[0-9]+$"
    },
    "pullRequest": {
      "description": "Pull Request",
      "type": "url",
      "searchIn": "https://github.com",
      "regex": "https://github.com/[^/]+/[^/]+/pull/[0-9]+($|\\?)"
    },
    "search": {
      "description": "Issue/PR Search",
      "type": "url",
      "searchIn": "https://github.com",
      "regex": "https://github.com/[^/]+/[^/]+/(pulls|issues$|issues\\?q=.*$)"
    },
    "prCommits": {
      "description": "PR Commits",
      "type": "url",
      "searchIn": "https://github.com",
      "regex": "https://github.com/[^/]+/[^/]+/pull/[0-9]+/commits$"
    },
    "prCommit": {
      "description": "PR Commit",
      "type": "url",
      "searchIn": "https://github.com",
      "regex": "https://github.com/[^/]+/[^/]+/pull/[0-9]+/commits/[a-f0-9]+$"
    },
    "prChanges": {
      "description": "PR Changes",
      "type": "url",
      "searchIn": "https://github.com",
      "regex": "https://github.com/[^/]+/[^/]+/pull/[0-9]+/files$"
    },
    "comment": {
      "description": "Comment",
      "type": "url",
      "searchIn": "https://github.com",
      "regex": "https://github.com/[^/]+/[^/]+/(pull|issue)/[0-9]+#issue(comment)?-[0-9]+$"
    }
  },
  "schema": {
    "types": [
      {
        "name": "Root",
        "description": "Driver for the Github API",
        "fields": [
          {
            "name": "users",
            "type": "UserCollection",
            "description": "Collection of Github users"
          },
          {
            "name": "status",
            "type": "String",
            "description": "String"
          },
          {
            "name": "parse",
            "type": "List",
            "hints": {
              "hidden": false
            },
            "ofType": {
              "type": "Ref",
              "ofType": "Repository"
            },
            "params": [
              {
                "name": "name",
                "type": "String"
              },
              {
                "name": "value",
                "type": "String"
              }
            ],
            "description": "List of repositories with name and value filters"
          },
          {
            "name": "search",
            "type": "GlobalSearch",
            "description": "Global search functionality"
          },
          {
            "name": "tests",
            "type": "Tests",
            "description": "Tests"
          }
        ],
        "actions": [
          {
            "name": "configure",
            "description": "Invoke with a valid Github access token to configure this driver",
            "params": [
              {
                "name": "token",
                "type": "String"
              }
            ],
            "type": "Void"
          },
          {
            "name": "endpoint",
            "type": "String",
            "hints": {
              "hidden": true
            },
            "params": [
              {
                "name": "method",
                "type": "String"
              },
              {
                "name": "body",
                "type": "String",
                "optional": true
              },
              {
                "name": "path",
                "type": "String"
              },
              {
                "name": "query",
                "type": "String",
                "optional": true
              },
              {
                "name": "headers",
                "type": "String"
              }
            ],
            "description": "Invoke an HTTP endpoint with the specified method, body, path, query, and headers"
          }
        ],
        "events": [
          {
            "name": "statusChanged",
            "type": "Void",
            "description": "Triggered when the status of the Github API driver changes"
          }
        ]
      },
      {
        "name": "UserCollection",
        "fields": [
          {
            "name": "one",
            "type": "User",
            "params": [
              {
                "name": "name",
                "type": "String"
              }
            ],
            "description": "Field representing a single Github user"
          },
          {
            "name": "page",
            "type": "UserPage",
            "params": [
              {
                "name": "since",
                "type": "String",
                "optional": true
              }
            ],
            "description": "Field representing a page of Github users"
          }
        ],
        "events": [],
        "description": "Collection of Github users"
      },
      {
        "name": "UserPage",
        "fields": [
          {
            "name": "items",
            "type": "List",
            "ofType": "User",
            "description": "List of Github user items"
          },
          {
            "name": "next",
            "type": "Ref",
            "ofType": "UserPage",
            "description": "Reference to the next page of Github user items"
          }
        ],
        "events": [],
        "description": "Collection of Github user items with pagination support"
      },
      {
        "name": "User",
        "fields": [
          {
            "name": "login",
            "type": "String",
            "hints": {
              "primary": true
            },
            "description": "The user's login name"
          },
          {
            "name": "name",
            "type": "String",
            "hints": {
              "secondary": true
            },
            "description": "The user's name"
          },
          {
            "name": "bio",
            "type": "String",
            "description": "The user's bio"
          },
          {
            "name": "blog",
            "type": "String",
            "description": "The user's blog"
          },
          {
            "name": "company",
            "type": "String",
            "description": "The user's company"
          },
          {
            "name": "repos",
            "type": "RepositoryCollection",
            "description": "Collection of Github repositories owned by the user"
          },
          {
            "name": "email",
            "type": "String",
            "description": "The user's email address"
          },
          {
            "name": "id",
            "type": "Int",
            "description": "The user's ID"
          },
          {
            "name": "followers",
            "type": "Int",
            "description": "The number of followers the user has"
          },
          {
            "name": "following",
            "type": "Int",
            "description": "The number of users the user is following"
          },
          {
            "name": "location",
            "type": "String",
            "description": "The user's location"
          },
          {
            "name": "type",
            "type": "String",
            "description": "The type of user"
          },
          {
            "name": "avatar_url",
            "type": "String",
            "description": "The URL of the user's avatar"
          },
          {
            "name": "created_at",
            "type": "String",
            "description": "The date the user account was created"
          },
          {
            "name": "gravatar_id",
            "type": "String",
            "description": "The user's gravatar ID"
          },
          {
            "name": "public_gists",
            "type": "Int",
            "description": "The number of public gists the user has"
          },
          {
            "name": "public_repos",
            "type": "Int",
            "description": "The number of public repositories the user has"
          },
          {
            "name": "site_admin",
            "type": "Boolean",
            "description": "Indicates if the user is a site admin"
          },
          {
            "name": "hireable",
            "type": "Boolean",
            "description": "Indicates if the user is available for hire"
          },
          {
            "name": "updated_at",
            "type": "String",
            "description": "The date the user account was last updated"
          }
        ],
        "events": [],
        "description": "Collection of Github users"
      },
      {
        "name": "RepositoryCollection",
        "fields": [
          {
            "name": "one",
            "type": "Repository",
            "params": [
              {
                "name": "name",
                "type": "String"
              }
            ],
            "description": "Retrieve a single repository by name"
          },
          {
            "name": "page",
            "type": "RepositoryPage",
            "params": [
              {
                "name": "type",
                "type": "String",
                "optional": true
              },
              {
                "name": "sort",
                "type": "String",
                "optional": true
              },
              {
                "name": "direction",
                "type": "String",
                "optional": true
              },
              {
                "name": "page",
                "type": "Int",
                "optional": true
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true
              }
            ],
            "description": "Retrieve a page of repositories with optional filtering and pagination"
          },
          {
            "name": "search",
            "type": "RepositoryPage",
            "params": [
              {
                "name": "q",
                "type": "String",
                "optional": true
              },
              {
                "name": "sort",
                "type": "String",
                "optional": true
              },
              {
                "name": "order",
                "type": "String",
                "optional": true
              },
              {
                "name": "page",
                "type": "Int",
                "optional": true
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true
              }
            ],
            "description": "Search for repositories with optional filtering and pagination"
          }
        ],
        "events": [],
        "description": "Collection of Github repositories"
      },
      {
        "name": "RepositoryPage",
        "fields": [
          {
            "name": "items",
            "type": "List",
            "ofType": "Repository",
            "description": "List of repositories in the page"
          },
          {
            "name": "next",
            "type": "Ref",
            "ofType": "RepositoryPage",
            "description": "Reference to the next page of repositories"
          }
        ],
        "events": [],
        "description": "Type representing a page of repositories"
      },
      {
        "name": "Repository",
        "fields": [
          {
            "name": "name",
            "type": "String",
            "hints": {
              "primary": true
            }
          },
          {
            "name": "description",
            "type": "String",
            "hints": {
              "secondary": true
            }
          },
          {
            "name": "content",
            "type": "ContentCollection"
          },
          {
            "name": "archived",
            "type": "Boolean"
          },
          {
            "name": "branches",
            "type": "BranchCollection"
          },
          {
            "name": "fork",
            "type": "Boolean"
          },
          {
            "name": "homepage",
            "type": "String"
          },
          {
            "name": "id",
            "type": "Int"
          },
          {
            "name": "language",
            "type": "String"
          },
          {
            "name": "private",
            "type": "Boolean"
          },
          {
            "name": "size",
            "type": "Int"
          },
          {
            "name": "url",
            "type": "String"
          },
          {
            "name": "allow_merge_commit",
            "type": "Boolean"
          },
          {
            "name": "allow_rebase_merge",
            "type": "Boolean"
          },
          {
            "name": "allow_squash_merge",
            "type": "Boolean"
          },
          {
            "name": "created_at",
            "type": "String"
          },
          {
            "name": "default_branch",
            "type": "String"
          },
          {
            "name": "forks_count",
            "type": "Int"
          },
          {
            "name": "full_name",
            "type": "String"
          },
          {
            "name": "has_downloads",
            "type": "Boolean"
          },
          {
            "name": "has_issues",
            "type": "Boolean"
          },
          {
            "name": "has_pages",
            "type": "Boolean"
          },
          {
            "name": "has_wiki",
            "type": "Boolean"
          },
          {
            "name": "html_url",
            "type": "String"
          },
          {
            "name": "issues",
            "type": "IssueCollection"
          },
          {
            "name": "network_count",
            "type": "Int"
          },
          {
            "name": "open_issues_count",
            "type": "Int"
          },
          {
            "name": "pushed_at",
            "type": "String"
          },
          {
            "name": "stargazers_count",
            "type": "Int"
          },
          {
            "name": "subscribers_count",
            "type": "Int"
          },
          {
            "name": "updated_at",
            "type": "String"
          },
          {
            "name": "watchers_count",
            "type": "Int"
          },
          {
            "name": "pull_requests",
            "params": [],
            "type": "PullRequestCollection"
          },
          {
            "name": "releases",
            "params": [],
            "type": "ReleaseCollection"
          },
          {
            "name": "license",
            "params": [],
            "type": "License"
          },
          {
            "name": "commits",
            "type": "CommitCollection"
          }
        ],
        "actions": [
          {
            "name": "transfer",
            "params": [
              {
                "name": "new_owner",
                "type": "String"
              },
              {
                "name": "new_name",
                "type": "String"
              }
            ],
            "type": "Void"
          },
          {
            "name": "addCollaborator",
            "params": [
              {
                "name": "username",
                "type": "String"
              },
              {
                "name": "permission",
                "type": "String",
                "description": "The permission to grant the collaborator. One of: pull, triage, push, maintain, admin. Default: push"
              }
            ],
            "type": "Void"
          },
          {
            "name": "createTree",
            "type": "String",
            "params": [
              {
                "name": "base",
                "type": "String"
              },
              {
                "name": "path",
                "type": "String"
              },
              {
                "name": "tree",
                "type": "String"
              }
            ]
          },
          {
            "name": "createFileTree",
            "type": "String",
            "params": [
              {
                "name": "base",
                "type": "String"
              },
              {
                "name": "path",
                "type": "String"
              },
              {
                "name": "content",
                "type": "String"
              }
            ]
          }
        ],
        "events": [
          {
            "name": "commentCreated",
            "type": "CommentEvent"
          },
          {
            "name": "issueOpened",
            "type": "IssueEvent"
          },
          {
            "name": "pullRequestOpened",
            "type": "PullRequestEvent"
          },
          {
            "name": "releasePublished",
            "type": "ReleaseEvent"
          },
          {
            "name": "pushed",
            "type": "PushEvent"
          }
        ],
        "description": "Collection of Github repositories"
      },
      {
        "name": "BranchCollection",
        "fields": [
          {
            "name": "one",
            "type": "Branch",
            "params": [
              {
                "name": "name",
                "type": "String",
                "description": "The name of the branch to retrieve"
              }
            ],
            "description": "Retrieve a single branch from the collection"
          },
          {
            "name": "page",
            "type": "BranchPage",
            "params": [
              {
                "name": "page",
                "type": "Int",
                "optional": true,
                "description": "The page number of branches to retrieve"
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true,
                "description": "The number of branches per page to retrieve"
              }
            ],
            "description": "Retrieve a page of branches from the collection"
          }
        ],
        "events": [],
        "description": "Collection of branches in a GitHub repository"
      },
      {
        "name": "BranchPage",
        "fields": [
          {
            "name": "items",
            "type": "List",
            "ofType": "Branch",
            "description": "List of branches"
          },
          {
            "name": "next",
            "type": "Ref",
            "ofType": "BranchPage",
            "description": "Reference to the next page of branches"
          }
        ],
        "events": [],
        "description": "Collection of branches with pagination support"
      },
      {
        "name": "Branch",
        "fields": [
          {
            "name": "name",
            "type": "String",
            "description": "The name of the branch"
          },
          {
            "name": "commit",
            "type": "Commit",
            "description": "The commit associated with the branch"
          },
          {
            "name": "protected",
            "type": "Boolean",
            "description": "Indicates whether the branch is protected"
          }
        ],
        "actions": [
          {
            "name": "update",
            "type": "Void",
            "params": [
              {
                "name": "sha",
                "type": "String",
                "description": "The SHA of the commit to update the branch with"
              },
              {
                "name": "ref",
                "type": "String",
                "description": "The reference for the branch update"
              }
            ],
            "description": "Updates the branch with the specified SHA and reference"
          }
        ],
        "events": [],
        "description": "Type representing a branch in a GitHub repository"
      },
      {
        "name": "CommitCollection",
        "fields": [
          {
            "name": "one",
            "type": "Commit",
            "params": [
              {
                "name": "ref",
                "type": "String"
              }
            ]
          },
          {
            "name": "page",
            "type": "CommitPage",
            "params": [
              {
                "name": "page",
                "type": "Int",
                "optional": true
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true
              }
            ]
          }
        ],
        "actions": [
          {
            "name": "create",
            "type": "String",
            "params": [
              {
                "name": "message",
                "type": "String"
              },
              {
                "name": "tree",
                "type": "String"
              },
              {
                "name": "parents",
                "type": "String"
              }
            ],
            "description": "Creates a new commit with the specified message, tree, and parents"
          }
        ],
        "events": [],
        "description": "Collection of Github commits"
      },
      {
        "name": "CommitPage",
        "fields": [
          {
            "name": "items",
            "type": "List",
            "ofType": "Commit",
            "description": "List of commit items."
          },
          {
            "name": "next",
            "type": "Ref",
            "ofType": "CommitPage",
            "description": "Reference to the next commit page."
          }
        ],
        "events": [],
        "description": "Type representing a page of commit items."
      },
      {
        "name": "Commit",
        "fields": [
          {
            "name": "sha",
            "type": "String",
            "description": "The SHA of the commit"
          },
          {
            "name": "message",
            "type": "String",
            "hints": {
              "primary": true
            },
            "description": "The commit message"
          },
          {
            "name": "author",
            "type": "User",
            "description": "The author of the commit"
          },
          {
            "name": "html_url",
            "type": "String",
            "description": "The HTML URL of the commit"
          },
          {
            "name": "date",
            "type": "String",
            "description": "The date of the commit"
          }
        ],
        "description": "Type representing a commit in a GitHub repository"
      },
      {
        "name": "CommentCollection",
        "fields": [
          {
            "name": "one",
            "type": "Comment",
            "params": [
              {
                "name": "id",
                "type": "Int"
              }
            ],
            "description": "Retrieve a single comment from the Github repository"
          },
          {
            "name": "page",
            "type": "CommentPage",
            "params": [
              {
                "name": "page",
                "type": "Int",
                "optional": true
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true
              }
            ],
            "description": "Retrieve a page of comments from the Github repository"
          }
        ],
        "events": [],
        "description": "Collection of comments from the Github repository"
      },
      {
        "name": "CommentPage",
        "fields": [
          {
            "name": "items",
            "type": "List",
            "ofType": "Comment",
            "description": "List of Comment items."
          },
          {
            "name": "next",
            "type": "Ref",
            "ofType": "CommentPage",
            "description": "Reference to the next CommentPage."
          }
        ],
        "events": [],
        "description": "Type schema for CommentPage, containing fields and references to other CommentPages."
      },
      {
        "name": "Comment",
        "fields": [
          {
            "name": "body",
            "type": "String",
            "hints": {
              "primary": true
            },
            "description": "The content of the comment"
          },
          {
            "name": "created_at",
            "type": "String",
            "description": "The creation date of the comment"
          },
          {
            "name": "updated_at",
            "type": "String",
            "description": "The date when the comment was last updated"
          }
        ],
        "description": "Collection of comments on Github"
      },
      {
        "name": "ContentCollection",
        "fields": [
          {
            "name": "file",
            "type": "Content",
            "params": [
              {
                "name": "path",
                "type": "String",
                "optional": true
              }
            ],
            "description": "Field representing a single file from Github"
          },
          {
            "name": "dir",
            "type": "List",
            "ofType": "Content",
            "params": [
              {
                "name": "path",
                "type": "String",
                "optional": true
              }
            ],
            "description": "Field representing a directory of files from Github"
          }
        ],
        "events": [],
        "actions": [],
        "description": "Collection of content items from Github"
      },
      {
        "name": "Content",
        "description": "A file, directory, symlink or submodule",
        "fields": [
          {
            "name": "type",
            "type": "String",
            "hints": {
              "primary": true
            },
            "description": "The type of the file, directory, symlink, or submodule"
          },
          {
            "name": "name",
            "type": "String",
            "hints": {
              "primary": true
            },
            "description": "The name of the file, directory, symlink, or submodule"
          },
          {
            "name": "encoding",
            "type": "String",
            "description": "The encoding type of the file content"
          },
          {
            "name": "content",
            "type": "String",
            "description": "The content of the file"
          },
          {
            "name": "contentText",
            "type": "String",
            "description": "The text content of the file"
          },
          {
            "name": "path",
            "type": "String",
            "description": "The path of the file, directory, symlink, or submodule"
          },
          {
            "name": "sha",
            "type": "String",
            "description": "The SHA hash of the file"
          },
          {
            "name": "size",
            "type": "Int",
            "description": "The size of the file in bytes"
          },
          {
            "name": "submodule_git_url",
            "type": "String",
            "description": "The git URL of the submodule"
          },
          {
            "name": "html_url",
            "type": "String",
            "description": "The HTML URL of the file"
          },
          {
            "name": "download_url",
            "type": "String",
            "description": "The download URL of the file"
          }
        ],
        "actions": [
          {
            "name": "setContent",
            "type": "Void",
            "params": [
              {
                "name": "content",
                "type": "String",
                "description": "The content to be set for the file"
              },
              {
                "name": "message",
                "type": "String",
                "optional": true,
                "description": "An optional message to accompany the content setting"
              }
            ],
            "description": "Set the content of the file with an optional message"
          },
          {
            "name": "setText",
            "type": "Void",
            "params": [
              {
                "name": "text",
                "type": "String",
                "description": "The text content to be set for the file"
              },
              {
                "name": "message",
                "type": "String",
                "optional": true,
                "description": "An optional message to accompany the text setting"
              }
            ],
            "description": "Set the text content of the file with an optional message"
          }
        ]
      },
      {
        "name": "IssueCollection",
        "fields": [
          {
            "name": "one",
            "type": "Issue",
            "params": [
              {
                "name": "number",
                "type": "Int"
              }
            ],
            "description": "Get a single issue by its number"
          },
          {
            "name": "search",
            "type": "IssueSearchPage",
            "params": [
              {
                "name": "page",
                "type": "Int",
                "optional": true
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true
              },
              {
                "name": "q",
                "type": "String",
                "description": "Github API returns pull requests in the issues endpoint. Use this to include/exclude them. Can be either issue or pr",
                "optional": true
              },
              {
                "name": "sort",
                "type": "String",
                "description": "What to sort results by. Can be created, updated, comments.",
                "optional": true
              },
              {
                "name": "order",
                "type": "String",
                "description": "One of asc (ascending) or desc (descending).",
                "optional": true
              }
            ],
            "description": "Search for issues based on specified criteria"
          },
          {
            "name": "page",
            "type": "IssuePage",
            "params": [
              {
                "name": "page",
                "type": "Int",
                "optional": true
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true
              },
              {
                "name": "kind",
                "type": "String",
                "description": "Github API returns pull requests in the issues endpoint. Use this to include/exclude them. Can be either issue or pr",
                "optional": true
              },
              {
                "name": "milestone",
                "type": "String",
                "description": "If an integer is passed, it should refer to a milestone by its number field. If the string * is passed, issues with any milestone are accepted. If the string none is passed, issues without milestones are returned.",
                "optional": true
              },
              {
                "name": "state",
                "type": "String",
                "description": "Indicates the state of the issues to return. Can be open, closed, or all.",
                "optional": true
              },
              {
                "name": "assignee",
                "type": "String",
                "description": "Can be the name of a user. Pass in none for issues with no assigned user, and * for issues assigned to any user.",
                "optional": true
              },
              {
                "name": "creator",
                "type": "String",
                "description": "The user that created the issue.",
                "optional": true
              },
              {
                "name": "mentioned",
                "type": "String",
                "description": "A user that's mentioned in the issue.",
                "optional": true
              },
              {
                "name": "labels",
                "type": "String",
                "description": "A list of comma separated label names. Example: bug,ui,@high",
                "optional": true
              },
              {
                "name": "sort",
                "type": "String",
                "description": "What to sort results by. Can be created, updated, comments.",
                "optional": true
              },
              {
                "name": "direction",
                "type": "String",
                "description": "One of asc (ascending) or desc (descending).",
                "optional": true
              },
              {
                "name": "since",
                "type": "String",
                "description": "Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ",
                "optional": true
              }
            ],
            "description": "Retrieve a page of issues based on specified criteria"
          }
        ],
        "events": [],
        "description": "Collection of Github issues"
      },
      {
        "name": "IssueSearchPage",
        "fields": [
          {
            "name": "total_count",
            "type": "Int"
          },
          {
            "name": "incomplete_results",
            "type": "Boolean"
          },
          {
            "name": "next",
            "type": "Ref",
            "ofType": "IssueSearchPage"
          },
          {
            "name": "items",
            "type": "List",
            "ofType": "Issue"
          }
        ],
        "events": [],
        "description": "Type representing the search results page for GitHub issues."
      },
      {
        "name": "IssuePage",
        "fields": [
          {
            "name": "items",
            "type": "List",
            "ofType": "Issue",
            "description": "List of issues in the current page."
          },
          {
            "name": "next",
            "type": "Ref",
            "ofType": "IssuePage",
            "description": "Reference to the next page of issues."
          }
        ],
        "events": [],
        "description": "Collection of issues and a reference to the next page of issues."
      },
      {
        "name": "Issue",
        "fields": [
          {
            "name": "active_lock_reason",
            "type": "String"
          },
          {
            "name": "assignee",
            "type": "User"
          },
          {
            "name": "assignees",
            "type": "List",
            "ofType": "User"
          },
          {
            "name": "author_association",
            "type": "String"
          },
          {
            "name": "body",
            "type": "String"
          },
          {
            "name": "closed_at",
            "type": "String"
          },
          {
            "name": "closed_by",
            "type": "User"
          },
          {
            "name": "comments",
            "type": "CommentCollection"
          },
          {
            "name": "created_at",
            "type": "String"
          },
          {
            "name": "draft",
            "type": "Boolean"
          },
          {
            "name": "id",
            "type": "Int"
          },
          {
            "name": "labels",
            "type": "List",
            "ofType": "Label"
          },
          {
            "name": "locked",
            "type": "Boolean"
          },
          {
            "name": "milestone",
            "type": "String"
          },
          {
            "name": "node_id",
            "type": "String"
          },
          {
            "name": "number",
            "type": "Int",
            "hints": {
              "primary": true
            }
          },
          {
            "name": "pull_request",
            "type": "PullRequest"
          },
          {
            "name": "reactions",
            "type": "Reactions"
          },
          {
            "name": "state",
            "type": "String"
          },
          {
            "name": "title",
            "type": "String",
            "hints": {
              "secondary": true
            }
          },
          {
            "name": "updated_at",
            "type": "String"
          },
          {
            "name": "url",
            "type": "String"
          },
          {
            "name": "user",
            "type": "User"
          },
          {
            "name": "html_url",
            "type": "String"
          }
        ],
        "actions": [
          {
            "name": "close",
            "params": [],
            "type": "Void"
          },
          {
            "name": "createComment",
            "params": [
              {
                "name": "body",
                "type": "String"
              }
            ],
            "type": "Void"
          }
        ],
        "events": [
          {
            "name": "commentCreated",
            "type": "CommentEvent"
          },
          {
            "name": "closed",
            "type": "Boolean"
          }
        ],
        "description": "Collection of Github issues"
      },
      {
        "name": "Label",
        "fields": [
          {
            "name": "name",
            "type": "String",
            "hints": {
              "primary": true
            }
          },
          {
            "name": "node_id",
            "type": "String"
          },
          {
            "name": "id",
            "type": "Int"
          },
          {
            "name": "color",
            "type": "String"
          },
          {
            "name": "description",
            "type": "String"
          },
          {
            "name": "default",
            "type": "Boolean"
          }
        ],
        "description": "Type Schema for a label in the Github repository"
      },
      {
        "name": "Reactions",
        "fields": [
          {
            "name": "total_count",
            "type": "Int"
          },
          {
            "name": "plus_1",
            "type": "Int"
          },
          {
            "name": "minus_1",
            "type": "Int"
          },
          {
            "name": "laugh",
            "type": "Int"
          },
          {
            "name": "hooray",
            "type": "Int"
          },
          {
            "name": "confused",
            "type": "Int"
          },
          {
            "name": "heart",
            "type": "Int"
          },
          {
            "name": "rocket",
            "type": "Int"
          },
          {
            "name": "eyes",
            "type": "Int"
          }
        ],
        "description": "Type representing the reactions to a GitHub item."
      },
      {
        "name": "PullRequest",
        "fields": [
          {
            "name": "number",
            "type": "Int",
            "hints": {
              "primary": true
            },
            "description": "The unique identifier of the pull request"
          },
          {
            "name": "title",
            "type": "String",
            "hints": {
              "primary": true
            },
            "description": "The title of the pull request"
          },
          {
            "name": "id",
            "type": "Int",
            "description": "The identifier of the pull request"
          },
          {
            "name": "state",
            "type": "String",
            "description": "The state of the pull request"
          },
          {
            "name": "body",
            "type": "String",
            "description": "The body content of the pull request"
          },
          {
            "name": "locked",
            "type": "Boolean",
            "description": "Indicates if the pull request is locked"
          },
          {
            "name": "merged",
            "type": "Boolean",
            "description": "Indicates if the pull request is merged"
          },
          {
            "name": "active_lock_reason",
            "params": [],
            "type": "String",
            "description": "The reason for the active lock on the pull request"
          },
          {
            "name": "diff",
            "params": [],
            "type": "String",
            "description": "The diff content of the pull request"
          },
          {
            "name": "node_id",
            "params": [],
            "type": "String",
            "description": "The node ID of the pull request"
          },
          {
            "name": "owner",
            "params": [],
            "type": "Ref",
            "ofType": "User",
            "description": "The owner of the pull request"
          },
          {
            "name": "comments",
            "type": "CommentCollection",
            "description": "Collection of comments associated with the pull request"
          }
        ],
        "actions": [
          {
            "name": "close",
            "params": [],
            "type": "Void",
            "description": "Close the pull request"
          },
          {
            "name": "createComment",
            "params": [
              {
                "name": "body",
                "type": "String"
              }
            ],
            "type": "Void",
            "description": "Create a new comment for the pull request"
          }
        ],
        "events": [
          {
            "name": "closed",
            "params": [],
            "type": "Boolean",
            "description": "Triggered when the pull request is closed"
          }
        ],
        "description": "Type representing a GitHub pull request"
      },
      {
        "name": "PullRequestCollection",
        "fields": [
          {
            "name": "one",
            "params": [
              {
                "name": "number",
                "type": "Int"
              }
            ],
            "type": "PullRequest",
            "description": "Retrieve a single pull request"
          },
          {
            "name": "page",
            "params": [
              {
                "name": "state",
                "type": "String",
                "optional": true
              },
              {
                "name": "head",
                "type": "String",
                "optional": true
              },
              {
                "name": "base",
                "type": "String",
                "optional": true
              },
              {
                "name": "sort",
                "type": "String",
                "optional": true
              },
              {
                "name": "direction",
                "type": "String",
                "optional": true
              },
              {
                "name": "page",
                "type": "Int",
                "optional": true
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true
              }
            ],
            "type": "PullRequestPage",
            "description": "Retrieve a page of pull requests"
          }
        ],
        "events": [],
        "description": "Collection of Github pull requests"
      },
      {
        "name": "PullRequestPage",
        "fields": [
          {
            "name": "items",
            "type": "List",
            "ofType": "PullRequest"
          },
          {
            "name": "next",
            "type": "Ref",
            "ofType": "PullRequestPage"
          }
        ],
        "events": [],
        "description": "Type representing a page of pull requests."
      },
      {
        "name": "ReleaseCollection",
        "fields": [
          {
            "name": "one",
            "params": [
              {
                "name": "id",
                "type": "String",
                "description": "The ID of the release to retrieve"
              }
            ],
            "type": "Release",
            "description": "Retrieves a single release by ID"
          },
          {
            "name": "page",
            "params": [
              {
                "name": "pageSize",
                "type": "String",
                "optional": true,
                "description": "The number of releases per page"
              },
              {
                "name": "page",
                "type": "String",
                "optional": true,
                "description": "The page number to retrieve"
              }
            ],
            "type": "ReleasePage",
            "description": "Retrieves a page of releases"
          }
        ],
        "events": [],
        "description": "Collection of Github releases"
      },
      {
        "name": "ReleasePage",
        "fields": [
          {
            "name": "items",
            "type": "List",
            "ofType": "Release"
          },
          {
            "name": "next",
            "type": "Ref",
            "ofType": "ReleasePage"
          }
        ],
        "events": [],
        "description": "Collection of Release items with pagination support"
      },
      {
        "name": "Release",
        "fields": [
          {
            "name": "id",
            "type": "String"
          },
          {
            "name": "name",
            "type": "String"
          },
          {
            "name": "body",
            "type": "String"
          },
          {
            "name": "draft",
            "type": "Boolean"
          },
          {
            "name": "prerelease",
            "type": "Boolean"
          },
          {
            "name": "url",
            "type": "String"
          },
          {
            "name": "node_id",
            "params": [],
            "type": "String"
          },
          {
            "name": "tag_name",
            "params": [],
            "type": "String"
          },
          {
            "name": "target_commitish",
            "params": [],
            "type": "String"
          },
          {
            "name": "created_at",
            "params": [],
            "type": "String"
          }
        ],
        "events": [],
        "description": "Collection of release information from Github"
      },
      {
        "name": "License",
        "fields": [
          {
            "name": "name",
            "type": "String"
          },
          {
            "name": "path",
            "type": "String"
          },
          {
            "name": "sha",
            "type": "String"
          },
          {
            "name": "size",
            "type": "Int"
          },
          {
            "name": "url",
            "type": "String"
          },
          {
            "name": "type",
            "type": "String"
          },
          {
            "name": "content",
            "type": "String"
          },
          {
            "name": "encoding",
            "type": "String"
          },
          {
            "name": "license",
            "type": "LicenseDesc"
          },
          {
            "name": "html_url",
            "params": [],
            "type": "String"
          },
          {
            "name": "git_url",
            "params": [],
            "type": "String"
          },
          {
            "name": "download_url",
            "params": [],
            "type": "String"
          }
        ],
        "events": [],
        "description": "Collection of License items"
      },
      {
        "name": "LicenseDesc",
        "fields": [
          {
            "name": "key",
            "type": "String",
            "description": "The key of the license description"
          },
          {
            "name": "name",
            "type": "String",
            "description": "The name of the license description"
          },
          {
            "name": "url",
            "type": "String",
            "description": "The URL of the license description"
          },
          {
            "name": "spdx_id",
            "params": [],
            "type": "String",
            "description": "The SPDX ID of the license description"
          }
        ],
        "events": [],
        "description": "Collection of License Description items"
      },
      {
        "name": "GlobalSearch",
        "fields": [
          {
            "name": "commits",
            "type": "CommitPage",
            "params": [
              {
                "name": "type",
                "type": "String",
                "optional": true
              },
              {
                "name": "sort",
                "type": "String",
                "optional": true
              },
              {
                "name": "direction",
                "type": "String",
                "optional": true
              },
              {
                "name": "page",
                "type": "Int",
                "optional": true
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true
              },
              {
                "name": "q",
                "type": "String",
                "optional": true
              }
            ]
          },
          {
            "name": "issues",
            "type": "IssuePage",
            "params": [
              {
                "name": "type",
                "type": "String",
                "optional": true
              },
              {
                "name": "sort",
                "type": "String",
                "optional": true
              },
              {
                "name": "direction",
                "type": "String",
                "optional": true
              },
              {
                "name": "page",
                "type": "Int",
                "optional": true
              },
              {
                "name": "pageSize",
                "type": "Int",
                "optional": true
              },
              {
                "name": "q",
                "type": "String",
                "optional": true
              }
            ]
          }
        ],
        "description": "Type for performing global search on the Github repository."
      },
      {
        "name": "IssueEvent",
        "fields": [
          {
            "name": "issue",
            "type": "Ref",
            "ofType": "Issue"
          }
        ],
        "description": "Type representing an event related to an issue in the Github repository."
      },
      {
        "name": "PullRequestEvent",
        "fields": [
          {
            "name": "pullRequest",
            "type": "Ref",
            "ofType": "PullRequest"
          }
        ],
        "description": "Type representing a pull request event."
      },
      {
        "name": "ReleaseEvent",
        "fields": [
          {
            "name": "release",
            "type": "Ref",
            "ofType": "Release"
          }
        ],
        "description": "Type representing a release event in the Github membrane driver."
      },
      {
        "name": "PushEvent",
        "fields": [
          {
            "name": "commit",
            "type": "Ref",
            "ofType": "Commit"
          }
        ],
        "description": "Type representing a push event in the Github repository."
      },
      {
        "name": "CommentEvent",
        "fields": [
          {
            "name": "comment",
            "type": "Ref",
            "ofType": "Comment"
          }
        ],
        "description": "Collection of comment events"
      },
      {
        "name": "Tests",
        "actions": [
          {
            "name": "testUser",
            "type": "Boolean"
          },
          {
            "name": "testRepo",
            "type": "Boolean"
          },
          {
            "name": "testIssue",
            "type": "Boolean"
          },
          {
            "name": "testCommit",
            "type": "Boolean"
          },
          {
            "name": "testIssueComment",
            "type": "Boolean"
          },
          {
            "name": "testPullRequest",
            "type": "Boolean"
          },
          {
            "name": "testSearch",
            "type": "Boolean"
          }
        ],
        "description": "Collection of tests for the Github driver"
      }
    ]
  }
}